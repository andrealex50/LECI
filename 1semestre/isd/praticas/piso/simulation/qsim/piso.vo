// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 20.1.1 Build 720 11/11/2020 SJ Lite Edition"

// DATE "01/03/2023 18:56:31"

// 
// Device: Altera EP4CE6E22C6 Package TQFP144
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module piso (
	Q,
	CLK,
	SHIFT,
	C,
	B,
	A,
	SIN);
output 	[2:0] Q;
input 	CLK;
input 	SHIFT;
input 	C;
input 	B;
input 	A;
input 	SIN;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \Q[2]~output_o ;
wire \Q[1]~output_o ;
wire \Q[0]~output_o ;
wire \CLK~input_o ;
wire \SIN~input_o ;
wire \A~input_o ;
wire \SHIFT~input_o ;
wire \inst5~0_combout ;
wire \inst~q ;
wire \B~input_o ;
wire \inst8~0_combout ;
wire \inst1~q ;
wire \C~input_o ;
wire \inst11~0_combout ;
wire [2:0] inst2;


cycloneive_io_obuf \Q[2]~output (
	.i(inst2[2]),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\Q[2]~output_o ),
	.obar());
// synopsys translate_off
defparam \Q[2]~output .bus_hold = "false";
defparam \Q[2]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \Q[1]~output (
	.i(inst2[1]),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\Q[1]~output_o ),
	.obar());
// synopsys translate_off
defparam \Q[1]~output .bus_hold = "false";
defparam \Q[1]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \Q[0]~output (
	.i(inst2[0]),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\Q[0]~output_o ),
	.obar());
// synopsys translate_off
defparam \Q[0]~output .bus_hold = "false";
defparam \Q[0]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_ibuf \CLK~input (
	.i(CLK),
	.ibar(gnd),
	.o(\CLK~input_o ));
// synopsys translate_off
defparam \CLK~input .bus_hold = "false";
defparam \CLK~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \SIN~input (
	.i(SIN),
	.ibar(gnd),
	.o(\SIN~input_o ));
// synopsys translate_off
defparam \SIN~input .bus_hold = "false";
defparam \SIN~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \A~input (
	.i(A),
	.ibar(gnd),
	.o(\A~input_o ));
// synopsys translate_off
defparam \A~input .bus_hold = "false";
defparam \A~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \SHIFT~input (
	.i(SHIFT),
	.ibar(gnd),
	.o(\SHIFT~input_o ));
// synopsys translate_off
defparam \SHIFT~input .bus_hold = "false";
defparam \SHIFT~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \inst5~0 (
// Equation(s):
// \inst5~0_combout  = (\SHIFT~input_o  & (\SIN~input_o )) # (!\SHIFT~input_o  & ((\A~input_o )))

	.dataa(\SIN~input_o ),
	.datab(\A~input_o ),
	.datac(gnd),
	.datad(\SHIFT~input_o ),
	.cin(gnd),
	.combout(\inst5~0_combout ),
	.cout());
// synopsys translate_off
defparam \inst5~0 .lut_mask = 16'hAACC;
defparam \inst5~0 .sum_lutc_input = "datac";
// synopsys translate_on

dffeas inst(
	.clk(\CLK~input_o ),
	.d(\inst5~0_combout ),
	.asdata(vcc),
	.clrn(vcc),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\inst~q ),
	.prn(vcc));
// synopsys translate_off
defparam inst.is_wysiwyg = "true";
defparam inst.power_up = "low";
// synopsys translate_on

cycloneive_io_ibuf \B~input (
	.i(B),
	.ibar(gnd),
	.o(\B~input_o ));
// synopsys translate_off
defparam \B~input .bus_hold = "false";
defparam \B~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \inst8~0 (
// Equation(s):
// \inst8~0_combout  = (\SHIFT~input_o  & (\inst~q )) # (!\SHIFT~input_o  & ((\B~input_o )))

	.dataa(\inst~q ),
	.datab(\B~input_o ),
	.datac(gnd),
	.datad(\SHIFT~input_o ),
	.cin(gnd),
	.combout(\inst8~0_combout ),
	.cout());
// synopsys translate_off
defparam \inst8~0 .lut_mask = 16'hAACC;
defparam \inst8~0 .sum_lutc_input = "datac";
// synopsys translate_on

dffeas inst1(
	.clk(\CLK~input_o ),
	.d(\inst8~0_combout ),
	.asdata(vcc),
	.clrn(vcc),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\inst1~q ),
	.prn(vcc));
// synopsys translate_off
defparam inst1.is_wysiwyg = "true";
defparam inst1.power_up = "low";
// synopsys translate_on

cycloneive_io_ibuf \C~input (
	.i(C),
	.ibar(gnd),
	.o(\C~input_o ));
// synopsys translate_off
defparam \C~input .bus_hold = "false";
defparam \C~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \inst11~0 (
// Equation(s):
// \inst11~0_combout  = (\SHIFT~input_o  & (\inst1~q )) # (!\SHIFT~input_o  & ((\C~input_o )))

	.dataa(\inst1~q ),
	.datab(\C~input_o ),
	.datac(gnd),
	.datad(\SHIFT~input_o ),
	.cin(gnd),
	.combout(\inst11~0_combout ),
	.cout());
// synopsys translate_off
defparam \inst11~0 .lut_mask = 16'hAACC;
defparam \inst11~0 .sum_lutc_input = "datac";
// synopsys translate_on

dffeas \inst2[2] (
	.clk(\CLK~input_o ),
	.d(\inst11~0_combout ),
	.asdata(vcc),
	.clrn(vcc),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(inst2[2]),
	.prn(vcc));
// synopsys translate_off
defparam \inst2[2] .is_wysiwyg = "true";
defparam \inst2[2] .power_up = "low";
// synopsys translate_on

dffeas \inst2[1] (
	.clk(\CLK~input_o ),
	.d(\inst11~0_combout ),
	.asdata(vcc),
	.clrn(vcc),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(inst2[1]),
	.prn(vcc));
// synopsys translate_off
defparam \inst2[1] .is_wysiwyg = "true";
defparam \inst2[1] .power_up = "low";
// synopsys translate_on

dffeas \inst2[0] (
	.clk(\CLK~input_o ),
	.d(\inst11~0_combout ),
	.asdata(vcc),
	.clrn(vcc),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(inst2[0]),
	.prn(vcc));
// synopsys translate_off
defparam \inst2[0] .is_wysiwyg = "true";
defparam \inst2[0] .power_up = "low";
// synopsys translate_on

assign Q[2] = \Q[2]~output_o ;

assign Q[1] = \Q[1]~output_o ;

assign Q[0] = \Q[0]~output_o ;

endmodule
