library ieee;
use ieee.std_logic_1164.all;

entity SequenceDetector is
    port (
        clk     : in  std_logic;
        reset   : in  std_logic;
        input   : in  std_logic;
        output  : out std_logic
    );
end entity SequenceDetector;

architecture Behavioral of SequenceDetector is
    type State is (IDLE, S0, S1, S2, S3);
    signal current_state, next_state : State;
begin
    -- Sequential logic process
    state_transition: process (clk, reset)
    begin
        if reset = '1' then
            current_state <= IDLE;
        elsif rising_edge(clk) then
            current_state <= next_state;
        end if;
    end process state_transition;

    -- Combinational logic process
    output_logic: process (current_state, input)
    begin
        case current_state is
            when IDLE =>
                if input = '0' then
                    next_state <= S0;
                elsif input = '1' then
                    next_state <= S1;
                else
                    next_state <= IDLE;
                end if;
            
            when S0 =>
                if input = '0' then
                    next_state <= S0;
                elsif input = '1' then
                    next_state <= S1;
                else
                    next_state <= IDLE;
                end if;
            
            when S1 =>
                if input = '0' then
                    next_state <= S2;
                elsif input = '1' then
                    next_state <= S1;
                else
                    next_state <= IDLE;
                end if;
            
            when S2 =>
                if input = '0' then
                    next_state <= S0;
                    output <= '1';  -- Output a '1' when sequence "00" is detected
                elsif input = '1' then
                    next_state <= S3;
                else
                    next_state <= IDLE;
                end if;
            
            when S3 =>
                if input = '0' then
                    next_state <= S0;
                elsif input = '1' then
                    next_state <= S1;
                    output <= '1';  -- Output a '1' when sequence "11" is detected
                else
                    next_state <= IDLE;
                end if;
                
            when others =>
                next_state <= IDLE;
        end case;
    end process output_logic;
end architecture Behavioral;
